@page "/locais/excluir/{id}"

@using APS8_MAUI_DESKTOP.Objects;
@using APS8_MAUI_DESKTOP.Services;
@inject LocalService _localService;
@inject NotificationService NotificationService;
@inject NavigationManager NavigationManager;
@inject DialogService DialogService

<div Class="rz-p-0 rz-p-md-12">
    <RadzenCard Variant="Variant.Filled" Class="rz-mx-auto">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Gap="0.5rem" Wrap="FlexWrap.Wrap">
            <RadzenButton Click=@(args => NavigationManager.NavigateTo("/locais/listar")) Disabled=@loading Icon="chevron_left" ButtonStyle="ButtonStyle.Primary" />
            <RadzenButton Click=@(async args => entidade = await atualizarEntidade()) Disabled=@loading Icon="refresh" ButtonStyle="ButtonStyle.Primary" />
        </RadzenStack>
    </RadzenCard>

    <RadzenCard Variant="Variant.Filled" Class="rz-mx-auto" Style="margin-top: 2rem">
        <RadzenRow Gap="1rem">
            <RadzenColumn Size="12">
                <RadzenStack>
                    <RadzenFormField Text="Cod" Variant="Variant.Text">
                        <RadzenNumeric Disabled="true" @bind-Value="@entidade.Id" />
                    </RadzenFormField>
                    <RadzenFormField Text="Nome do local" Variant="Variant.Text">
                        <RadzenTextBox Disabled @bind-Value="@entidade.Nome" />
                    </RadzenFormField>
                    <RadzenFormField Text="Latitude" Variant="Variant.Text">
                        <RadzenNumeric Disabled="true" @bind-Value="@entidade.Latitude" />
                    </RadzenFormField>
                    <RadzenFormField Text="Longitude" Variant="Variant.Text">
                        <RadzenNumeric Disabled="true" @bind-Value="@entidade.Longitude" />
                    </RadzenFormField>
                    <RadzenFormField Text="CEP" Variant="Variant.Text">
                        <RadzenNumeric Disabled="true" @bind-Value="@entidade.Cep" />
                    </RadzenFormField>
                    <RadzenFormField Text="Cidade" Variant="Variant.Text">
                        <RadzenTextBox Disabled="true" @bind-Value="@entidade.Cidade" />
                    </RadzenFormField>
                    <RadzenFormField Text="Estado" Variant="Variant.Text">
                        <RadzenTextBox Disabled="true" @bind-Value="@entidade.Estado" />
                    </RadzenFormField>
                    <RadzenFormField Text="País" Variant="Variant.Text">
                        <RadzenTextBox Disabled="true" @bind-Value="@entidade.Pais" />
                    </RadzenFormField>
                    <RadzenButton Click=@(async args => await OnClickExcluir()) Text="Excluir" ButtonStyle="ButtonStyle.Danger" />
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>
</div>

@code {
    [Parameter] public string Id { get; set; }

    Local entidade = new();
    bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        this.entidade = await _localService.GetLocal(this.Id);
        this.loading = false;
    }

    private async Task OnClickExcluir()
    {
        var result = await DialogService.Confirm($"Deseja excluir o local {this.entidade.Nome}?", "Excluir Local", new ConfirmOptions() { OkButtonText = "Sim", CancelButtonText = "Não" });

        if (result.Value == true)
        {
            var excluido = await _localService.ExcluirLocal(this.entidade.Id);

            if (excluido)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Sucesso", Detail = "Local excluido", Duration = 4000, CloseOnClick = true, Payload = DateTime.Now });
                NavigationManager.NavigateTo("/locais/listar");
            }
        else
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = "Local não excluido", Duration = 4000, CloseOnClick = true, Payload = DateTime.Now });
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "", Detail = "Local não excluido", Duration = 4000, CloseOnClick = true, Payload = DateTime.Now });
        }
    }

    private async Task<Local> atualizarEntidade()
    {
        this.loading = true;
        var localAtualizado = await _localService.GetLocal(this.Id);
        this.loading = false;
        return localAtualizado;
    }
}
